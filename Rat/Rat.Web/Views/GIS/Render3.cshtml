
@{
    ViewData["Title"] = "Index";
}

<link rel="stylesheet" href="https://openlayers.org/en/v4.6.5/css/ol.css" type="text/css">
<div id="map" class="map"></div>
<canvas id="legend" class="legend"></canvas>

@section Scripts{
    <script src="https://openlayers.org/en/v4.6.5/build/ol.js"></script>
    <script src="~/js/kriging.js"></script>
    <script type="text/javascript">
        var chinaCenter = ol.proj.fromLonLat([112.6, 20]); // 珠海
        //var chinaCenter = ol.proj.fromLonLat([104.113106, 37.570693]); // 中国矩心
        var initZoom = 7; // 初始缩放
        var projection = ol.proj.get('EPSG:3857'); // 投影坐标系
        var projectionExtent = projection.getExtent(); // 投影坐标系范围
        var projectionSize = ol.extent.getWidth(projectionExtent) / 256;
        var minZoom = 1;
        var maxZoom = 19;
        var resolutions = [];
        for (var i = 0; i <= 19; i++) {
            resolutions[i] = projectionSize / Math.pow(2, i);
        }
        var wrapX = true;
        var tempJson;
        var url = "/json/chaozhan.json";
        var request = new XMLHttpRequest();
        request.open("get", url);
        request.send(null);
        request.onload = function () {
            if (request.status == 200) {
                tempJson = JSON.parse(request.responseText);
                CZ(0);
                var map = new ol.Map({
                    layers: [
                        new ol.layer.Tile({
                            source: vecSource
                        }),
                        new ol.layer.Tile({
                            source: cvaSource
                        }),
                        new ol.layer.Tile({
                            source: tileSource
                        })
                    ],
                    target: 'map',
                    controls: ol.control.defaults({ attribution: false }),
                    view: new ol.View({
                        center: chinaCenter,
                        zoom: initZoom,
                        minZoom: minZoom,
                        maxZoom: maxZoom
                    })
                });
            }
        }
        var d2 = 0.05 * 0.05;
        function CZ(i) {
            if (i < tempJson.length) {
                var itemi = tempJson[i];
                var itemj;
                var dj = 259200;
                for (var k = i + 1; k < tempJson.length; k++) {
                    var itemk = tempJson[k];
                    var dk = (itemi.xgrid - itemk.xgrid) * (itemi.xgrid - itemk.xgrid) + (itemi.ygrid - itemk.ygrid) * (itemi.ygrid - itemk.ygrid);
                    if (dk < dj) {
                        itemj = itemk;
                        dj = dk;
                    }
                }
                if (dj != 259200) {
                    if (dj > d2) {
                        var item = {
                            xgrid: (itemi.xgrid + itemj.xgrid) / 2,
                            ygrid: (itemi.ygrid + itemj.ygrid) / 2,
                            value: (itemi.value + itemj.value) / 2
                        };
                        var a = tempJson.slice(0, i + 1);
                        a.push(item);
                        tempJson = a.concat(tempJson.slice(i + 1));
                        CZ(i);
                    } else {
                        CZ(i + 1);
                    }
                }
            }
        }
        var isGradient = true;
        var colors = [{
            r: 128,
            g: 214,
            b: 0
        }, {
            r: 0,
            g: 228,
            b: 0
        }, {
            r: 255,
            g: 255,
            b: 0
        }, {
            r: 255,
            g: 126,
            b: 0
        }, {
            r: 255,
            g: 0,
            b: 0
        }, {
            r: 153,
            g: 0,
            b: 76
        }, {
            r: 126,
            g: 0,
            b: 35
        }, {
            r: 108,
            g: 0,
            b: 8
        }];
        var gradients = [0, 1.427, 2.854, 4.282, 5.71, 7.138, 8.566, 10];
        var levels = [0, 50, 100, 150, 200, 300, 500];
        // 获取颜色
        function getColor(lt) {
            var r, g, b;
            if (isGradient) {
                for (var k = 1, l = 0; k < gradients.length; l = k++) {
                    if (lt <= gradients[k]) {
                        var p = (lt - gradients[l]) / (gradients[k] - gradients[l]);
                        r = colors[l].r + Math.round(p * (colors[k].r - colors[l].r));
                        g = colors[l].g + Math.round(p * (colors[k].g - colors[l].g));
                        b = colors[l].b + Math.round(p * (colors[k].b - colors[l].b));
                        break;
                    }
                }
            } else {
                for (var k = 1; k < levels.length; k++) {
                    if (lt <= levels[k]) {
                        r = colors[k].r;
                        g = colors[k].g;
                        b = colors[k].b;
                        break;
                    }
                }
            }
            return 'rgb(' + r + ',' + g + ',' + b + ')';
        }
        var vecSource = new ol.source.TileImage({
            projection: projection,
            tileGrid: new ol.tilegrid.TileGrid({
                extent: projectionExtent,
                minZoom: 1,
                origin: ol.extent.getTopLeft(projectionExtent),
                resolutions: resolutions,
                tileSize: [256, 256]
            }),
            url: 'http://t{0-7}.tianditu.gov.cn/vec_w/wmts?tk=fdcab2d88e293c189daf038cd01592e6&layer=vec&style=default&tilematrixset=w&Service=WMTS&Request=GetTile&Version=1.0.0&Format=tiles&TileMatrix={z}&TileCol={x}&TileRow={y}',
            wrapX: wrapX
        });
        var cvaSource = new ol.source.TileImage({
            projection: projection,
            tileGrid: new ol.tilegrid.TileGrid({
                extent: projectionExtent,
                minZoom: 1,
                origin: ol.extent.getTopLeft(projectionExtent),
                resolutions: resolutions,
                tileSize: [256, 256]
            }),
            url: 'http://t{0-7}.tianditu.gov.cn/cva_w/wmts?tk=fdcab2d88e293c189daf038cd01592e6&layer=cva&style=default&tilematrixset=w&Service=WMTS&Request=GetTile&Version=1.0.0&Format=tiles&TileMatrix={z}&TileCol={x}&TileRow={y}',
            wrapX: wrapX
        });

        var tileSource = new ol.source.TileImage({
            projection: projection,
            tileGrid: new ol.tilegrid.TileGrid({
                extent: projectionExtent,
                minZoom: 5,
                origin: ol.extent.getTopLeft(projectionExtent),
                resolutions: resolutions,
                tileSize: [256, 256]
            }),
            tileUrlFunction: function (tileCoord, pixelRatio, projection) {
                var canvas = document.createElement('canvas');
                canvas.width = 256;
                canvas.height = 256;
                var tileGrid = tileSource.getTileGrid();
                var resolution = tileGrid.getResolution(tileCoord[0]);
                var extent = tileGrid.getTileCoordExtent(tileCoord);
                // console.time("TileImage");
                var ctx = canvas.getContext("2d");
                // ctx.globalAlpha = 0.8;
                // 渲染
                var w = 5;
                for (var i = 0; i < tempJson.length; i++) {
                    var item = tempJson[i];
                    var point = ol.proj.fromLonLat([item.xgrid, item.ygrid]);
                    var pixel = [(point[0] - extent[0]) / resolution, (extent[3] - point[1]) / resolution];
                    ctx.fillStyle = getColor(item.value * 10);
                    ctx.fillRect(pixel[0], pixel[1], w, w);
                }

                // console.timeEnd("TileImage");
                return canvas.toDataURL();
            },
            wrapX: false
        });



        function initLegend() {
            var canvas = document.getElementById('legend');
            canvas.width = 32;
            canvas.height = 516;
            var ctx = canvas.getContext("2d");
            var grd = ctx.createLinearGradient(0, 8, 0, 508);
            grd.addColorStop(0, 'rgb(128,214,0)');
            grd.addColorStop(0.05, 'rgb(0,228,0)');
            grd.addColorStop(0.15, 'rgb(255,255,0)');
            grd.addColorStop(0.25, 'rgb(255,126,0)');
            grd.addColorStop(0.35, 'rgb(255,0,0)');
            grd.addColorStop(0.5, 'rgb(153,0,76)');
            grd.addColorStop(0.8, 'rgb(126,0,35)');
            grd.addColorStop(1, 'rgb(108,0,8)');

            ctx.shadowBlur = 10;
            ctx.shadowOffsetX = 2;
            ctx.shadowOffsetY = 2;
            ctx.shadowColor = "black";
            ctx.fillStyle = grd;
            ctx.fillRect(0, 0, 32, 516);

            ctx.fillStyle = 'rgb(255,255,255)';
            ctx.font = '16px sans-serif';
            ctx.textAlign = "center";
            ctx.textBaseline = "middle";
            ctx.fillText('0', 16, 8);
            ctx.fillText('50', 16, 58);
            ctx.fillText('100', 16, 108);
            ctx.fillText('150', 16, 158);
            ctx.fillText('200', 16, 208);
            ctx.fillText('300', 16, 308);
            ctx.fillText('500', 16, 508);

            canvas.onmousemove = function (evt) {
                console.log(evt);
                if (evt.y >= 307 && evt.y <= 808) {
                    this.title = evt.y - 307;
                }
            }
        }

        initLegend();
    </script>
}